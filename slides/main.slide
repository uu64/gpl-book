# Go研修ふりかえり

Yusuke Tamura
17 Feb 2022

## モチベーション

- MicroService周りなどでGo言語が盛り上がっていて気になっていた。
- 少し触ってみたらスクリプト言語の書きやすさと型の安心感が感じられてもっとちゃんと学びたくなった。
- 過去に「プログラミング言語Java」に一人で取り組んでそのボリュームに挫折していたので、研修という場で半ば強制的に学べるのが魅力的だった。

## 半年の研修を終えて

- Goだけで約17,000行書いた。短期間で１つの言語をこのボリューム書いたのは初めてな気がするので、ある程度自信はついた。
- 並行処理やリフレクションといった普段あまり使わない機能まで網羅的にコードを書けたのが良かった。
- 練習問題はGo以外の部分（Webとか）でも知識が要求されたので、難しかったがそれゆえの面白さはあった。
  - 一人だったら挫折していた気がしているので研修という形で取り組めたのはよかった。

## 印象に残っている問題

## フラクタルの描画

- Mandelbrot集合やNewton法自体に詳しくなかったので、そこを調べるところからだった。
- 実装結果がビジュアル的にわかりやすかったので、解けたときの満足感があった。
- Mandelbrot集合をズームして描画精度を確認する問題では、座標を狙わないと画面が真っ暗になってしまうので、どのあたりの座標を狙うときれいに描画されるか調べるためにYoutubeのMandelbrot集合の動画を見たりした。

## Githubのissueを管理するCLI実装

- 問題で要求されている機能が多かった（issueのCRUD）ので、単純にボリュームがあって大変だった。
- 特に更新処理は認証トークンの取り扱いについてもGithubのドキュメントを読まなければならず、Go以外の部分で苦労した印象。

## 並行処理全般

- 並行処理をあまり書いたことがないゆえ難しさを感じた。
- バッファなしチャネルは待ちが発生することで複数goroutineの動作を同期する、というのは、複数のgoroutineを協調させる上で大事だなと思った。
- ロックに関して、CPUキャッシュがあるからGETS系の処理でもロックが必要、という話は、今までCPUキャッシュを意識したことがなかったのでなるほどとなった。

## FTPサーバーの実装

- Goでの実装というよりRFCを読み解くのが大変だった。
- 全練習問題で一番時間がかかったのはこれ。

## リフレクションを使ったS式のパース

- リフレクション自体も難しかったが、S式のパーサ自体のロジックも再帰を含んでいて読み解くのに時間がかかった。
- `reflect.Value` の具体値の読み方が型によって異なるのがややこしかった。

## 最後に

- せっかくたくさん書いたのでGoを書く仕事を作りたい
- 半年間ありがとうございました
